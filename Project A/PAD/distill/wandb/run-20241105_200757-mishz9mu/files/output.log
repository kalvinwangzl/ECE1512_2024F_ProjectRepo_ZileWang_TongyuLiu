Distributed training:  False
Hyper-parameters:
 {'cfg': '../configs/mnist_IPC50.yaml', 'dataset': 'MNIST', 'subset': 'imagenette', 'model': 'ConvNet', 'ipc': 50, 'eval_mode': 'S', 'num_eval': 1, 'eval_it': 500, 'epoch_eval_train': 1000, 'Iteration': 10000, 'lr_img': 1000, 'lr_teacher': 0.01, 'lr_init': 0.01, 'batch_real': 256, 'batch_syn': 1000, 'batch_train': 128, 'pix_init': 'samples_predicted_correctly', 'dsa': True, 'dsa_strategy': 'color_crop_cutout_flip_scale_rotate', 'data_path': '../dataset', 'buffer_path': '../buffer_storage/', 'expert_epochs': 3, 'syn_steps': 80, 'max_start_epoch': 4, 'min_start_epoch': 0, 'zca': True, 'load_all': False, 'no_aug': False, 'texture': False, 'canvas_size': 2, 'canvas_samples': 1, 'max_files': None, 'max_experts': None, 'force_save': False, 'ema_decay': 0.9995, 'lr_y': 2.0, 'Momentum_y': 0.9, 'project': 'CIFAR10_ipc50', 'name': 'RANDOM', 'threshold': 1.0, 'loss_ratio': 0.25, 'depth_ratio': 0.25, 'record_loss': False, 'Sequential_Generation': True, 'expansion_end_epoch': 2000, 'current_max_start_epoch': 2, 'init_frozen': 'start', 'skip_first_eva': False, 'parall_eva': False, 'lr_lr': 1e-05, 'res': 32, 'device': 'cuda', 'Initialize_Label_With_Another_Model': False, 'Initialize_Label_Model': '', 'Initialize_Label_Model_Dir': '', 'Label_Model_Timestamp': -1, 'zca_trans': ZCAWhitening(), 'im_size': [28, 28], 'dc_aug_param': None, 'dsa_param': <utils.utils_baseline.ParamDiffAug object at 0x7823e0c77a90>, '_wandb': {}, 'distributed': False}
Evaluation model pool:  ['ConvNet']
BUILDING DATASET
  0% 0/60000 [00:00<?, ?it/s]/content/drive/MyDrive/Colab Notebooks/projecta/PAD/PAD/distill/PAD_depth.py:116: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  labels_all.append(class_map[torch.tensor(sample[1]).item()])
100% 60000/60000 [00:01<00:00, 52052.60it/s]
60000it [00:00, 646966.29it/s]
class c = 0: 5923 real images
class c = 1: 6742 real images
class c = 2: 5958 real images
class c = 3: 6131 real images
class c = 4: 5842 real images
class c = 5: 5421 real images
class c = 6: 5918 real images
class c = 7: 6265 real images
class c = 8: 5851 real images
class c = 9: 5949 real images
real images channel 0, mean = 0.0000, std = 0.3602
/content/drive/MyDrive/Colab Notebooks/projecta/PAD/PAD/distill/PAD_depth.py:138: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at ../torch/csrc/utils/tensor_new.cpp:278.)
  label_syn = torch.tensor([np.ones(args.ipc) * i for i in range(num_classes)], dtype=torch.long, requires_grad=False,
Expert Dir: ../buffer_storage/MNIST/ConvNet
loading file ../buffer_storage/MNIST/ConvNet/replay_buffer_7.pt
/content/drive/MyDrive/Colab Notebooks/projecta/PAD/PAD/distill/PAD_depth.py:178: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  buffer = torch.load(expert_files[expert_id[file_idx]])
/content/drive/MyDrive/Colab Notebooks/projecta/PAD/PAD/distill/PAD_depth.py:208: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  temp_params = torch.load(label_expert_files[0])[0][args.Label_Model_Timestamp]
0.0.0
1.0.0
2.0.0
3.0.0
4.0.0
5.0.0
6.0.0
7.0.0
8.0.0
9.0.0
[2024-11-05 20:08:00] training begins
/content/drive/MyDrive/Colab Notebooks/projecta/PAD/PAD/distill/PAD_depth.py:292: FutureWarning: You are using `torch.load` with `weights_only=False` (the current default value), which uses the default pickle module implicitly. It is possible to construct malicious pickle data which will execute arbitrary code during unpickling (See https://github.com/pytorch/pytorch/blob/main/SECURITY.md#untrusted-models for more details). In a future release, the default value for `weights_only` will be flipped to `True`. This limits the functions that could be executed during unpickling. Arbitrary objects will no longer be allowed to be loaded via this mode unless they are explicitly allowlisted by the user via `torch.serialization.add_safe_globals`. We recommend you start setting `weights_only=True` for any use case where you don't have full control of the loaded file. Please open an issue on GitHub for any issues related to this experimental feature.
  Temp_Buffer = torch.load(label_expert_files[i])
InitialAcc:1.0
clear here
OrderedDict([('active.all.allocated', 8622), ('active.all.current', 9), ('active.all.freed', 8613), ('active.all.peak', 23), ('active.large_pool.allocated', 2515), ('active.large_pool.current', 4), ('active.large_pool.freed', 2511), ('active.large_pool.peak', 8), ('active.small_pool.allocated', 6107), ('active.small_pool.current', 5), ('active.small_pool.freed', 6102), ('active.small_pool.peak', 18), ('active_bytes.all.allocated', 91320442880), ('active_bytes.all.current', 12712960), ('active_bytes.all.freed', 91307729920), ('active_bytes.all.peak', 282876416), ('active_bytes.large_pool.allocated', 90505549824), ('active_bytes.large_pool.current', 12630528), ('active_bytes.large_pool.freed', 90492919296), ('active_bytes.large_pool.peak', 282337280), ('active_bytes.small_pool.allocated', 814893056), ('active_bytes.small_pool.current', 82432), ('active_bytes.small_pool.freed', 814810624), ('active_bytes.small_pool.peak', 2088960), ('allocated_bytes.all.allocated', 91320442880), ('allocated_bytes.all.current', 12712960), ('allocated_bytes.all.freed', 91307729920), ('allocated_bytes.all.peak', 282876416), ('allocated_bytes.large_pool.allocated', 90505549824), ('allocated_bytes.large_pool.current', 12630528), ('allocated_bytes.large_pool.freed', 90492919296), ('allocated_bytes.large_pool.peak', 282337280), ('allocated_bytes.small_pool.allocated', 814893056), ('allocated_bytes.small_pool.current', 82432), ('allocated_bytes.small_pool.freed', 814810624), ('allocated_bytes.small_pool.peak', 2088960), ('allocation.all.allocated', 8622), ('allocation.all.current', 9), ('allocation.all.freed', 8613), ('allocation.all.peak', 23), ('allocation.large_pool.allocated', 2515), ('allocation.large_pool.current', 4), ('allocation.large_pool.freed', 2511), ('allocation.large_pool.peak', 8), ('allocation.small_pool.allocated', 6107), ('allocation.small_pool.current', 5), ('allocation.small_pool.freed', 6102), ('allocation.small_pool.peak', 18), ('inactive_split.all.allocated', 1489), ('inactive_split.all.current', 6), ('inactive_split.all.freed', 1483), ('inactive_split.all.peak', 7), ('inactive_split.large_pool.allocated', 736), ('inactive_split.large_pool.current', 4), ('inactive_split.large_pool.freed', 732), ('inactive_split.large_pool.peak', 5), ('inactive_split.small_pool.allocated', 753), ('inactive_split.small_pool.current', 2), ('inactive_split.small_pool.freed', 751), ('inactive_split.small_pool.peak', 4), ('inactive_split_bytes.all.allocated', 37784644096), ('inactive_split_bytes.all.current', 144573440), ('inactive_split_bytes.all.freed', 37640070656), ('inactive_split_bytes.all.peak', 155952640), ('inactive_split_bytes.large_pool.allocated', 36966822912), ('inactive_split_bytes.large_pool.current', 142558720), ('inactive_split_bytes.large_pool.freed', 36824264192), ('inactive_split_bytes.large_pool.peak', 153870336), ('inactive_split_bytes.small_pool.allocated', 817821184), ('inactive_split_bytes.small_pool.current', 2014720), ('inactive_split_bytes.small_pool.freed', 815806464), ('inactive_split_bytes.small_pool.peak', 2702848), ('max_split_size', -1), ('num_alloc_retries', 0), ('num_device_alloc', 6), ('num_device_free', 3), ('num_ooms', 0), ('num_sync_all_streams', 1), ('oversize_allocations.allocated', 0), ('oversize_allocations.current', 0), ('oversize_allocations.freed', 0), ('oversize_allocations.peak', 0), ('oversize_segments.allocated', 0), ('oversize_segments.current', 0), ('oversize_segments.freed', 0), ('oversize_segments.peak', 0), ('requested_bytes.all.allocated', 91319863988), ('requested_bytes.all.current', 12709332), ('requested_bytes.all.freed', 91307154656), ('requested_bytes.all.peak', 282873660), ('requested_bytes.large_pool.allocated', 90505245432), ('requested_bytes.large_pool.current', 12629328), ('requested_bytes.large_pool.freed', 90492616104), ('requested_bytes.large_pool.peak', 282335608), ('requested_bytes.small_pool.allocated', 814618556), ('requested_bytes.small_pool.current', 80004), ('requested_bytes.small_pool.freed', 814538552), ('requested_bytes.small_pool.peak', 2087884), ('reserved_bytes.all.
-------------------------
Evaluation
model_train = ConvNet, model_eval = ConvNet, iteration = 0
DSA augmentation strategy:
 color_crop_cutout_flip_scale_rotate
DSA augmentation parameters:
 {'aug_mode': 'S', 'prob_flip': 0.5, 'ratio_scale': 1.2, 'ratio_rotate': 15.0, 'ratio_crop_pad': 0.125, 'ratio_cutout': 0.5, 'ratio_noise': 0.05, 'brightness': 1.0, 'saturation': 2.0, 'contrast': 0.5}
  0% 0/1001 [00:00<?, ?it/s]/usr/local/lib/python3.10/dist-packages/torch/functional.py:534: UserWarning: torch.meshgrid: in an upcoming release, it will be required to pass the indexing argument. (Triggered internally at ../aten/src/ATen/native/TensorShape.cpp:3595.)
  return _VF.meshgrid(tensors, **kwargs)  # type: ignore[attr-defined]
100% 1001/1001 [00:23<00:00, 43.34it/s]
[2024-11-05 20:08:27] Evaluate_00: epoch = 1000 train time = 23 s train loss = 0.135656 train acc = 0.0080, test acc = 0.9739
Evaluate 1 random ConvNet, mean = 0.9839 std = 0.0000
-------------------------
INFO:numexpr.utils:NumExpr defaulting to 12 threads.
get here!
Traceback (most recent call last):
  File "/content/drive/MyDrive/Colab Notebooks/projecta/PAD/PAD/distill/PAD_depth.py", line 641, in <module>
    main(args)
  File "/content/drive/MyDrive/Colab Notebooks/projecta/PAD/PAD/distill/PAD_depth.py", line 568, in main
    grad = torch.autograd.grad(ce_loss, student_params[-1], create_graph=True)[0]
  File "/usr/local/lib/python3.10/dist-packages/torch/autograd/__init__.py", line 496, in grad
    result = _engine_run_backward(
  File "/usr/local/lib/python3.10/dist-packages/torch/autograd/graph.py", line 825, in _engine_run_backward
    return Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 250.00 MiB. GPU 0 has a total capacity of 39.56 GiB of which 162.81 MiB is free. Process 186058 has 39.40 GiB memory in use. Of the allocated memory 38.62 GiB is allocated by PyTorch, and 284.79 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
